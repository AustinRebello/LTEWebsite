<div class="row ">

<div class="col-md-5">
    <div class="results-box mt-3">

        <div class="results-header">

            <img src="https://imagedelivery.net/ilUJ6Cy8nNz2i8r1DPuCPg/3f1f3a49-f014-4257-c2ba-9334d5b33200/public"/>

            <div class="results-candidate-name">
                <h2>Brown</h2>
                <p>Projected Winner</p>
            </div>

            <div class="results-candidate-totals">
                <h2>56.75%</h2>
                <p>5,404,393</p>
            </div>
        </div>

        <div id="raceTitle" class="results-bar">
            <p class="font-bold raceTitle">2024 ELECTION: OHIO SENATE</p>
        </div>

        <div class="results-bar gray unpadded">

            <table class="results-table">

                <tr>
                    <th></th>
                    <th>Candidate</th>
                    <th>%</th>
                    <th>Votes</th>
                </tr>

                <tr class="results-candidateTable bg-blue">
                    <td></td>
                    <td data-type='name'>
                        <span>Sherrod Brown</span><br/>
                        <span><i>Democrat</i></span>
                    </td>
                    <td data-type='percent'>56.75%</td>
                    <td data-type='votes'>5,404,393</td>
                </tr>

                <tr class="results-candidateTable bg-red">
                    <td></td>
                    <td data-type='name'>
                        <span>Jim Renacci</span><br/>
                        <span><i>Republican</i></span>
                    </td>
                    <td data-type='percent'>43.25%</td>
                    <td data-type='votes'>4,118,766</td>
                </tr>

                <tr class="results-candidateTable bg-dark-gray">
                    <td></td>
                    <td data-type='name'>
                        <span>Sunset Coda</span><br/>
                        <span><i>Independent</i></span>
                    </td>
                    <td data-type='percent'>0.01%</td>
                    <td data-type='votes'>26</td>
                </tr>

                <tr class="results-candidateTable bg-dark-gray">
                    <td></td>
                    <td data-type='name'>
                        <span>All Other Candidates</span><br/>
                        <span><i>&nbsp;</i></span>
                    </td>
                    <td data-type='percent'>0.01%</td>
                    <td data-type='votes'>21</td>
                </tr>
            </table>

        </div>

        <div class="results-bar gray">

            <div class="results-reporting-bar mt-1">
                
                <div class="results-reporting-progress" style="width: 85%;">
                </div>
                <span>85% Reporting</span>
            </div>

            <div class="results-reporting-context">
                <p data-type='lastUpdated' style="float: left;">Last updated at 3:05PM ET</p>
                <p data-type='expectedVotes' style="float: right;">~6,800,000 votes expected</p>
            </div>

        </div>

        <div class="results-math px-5 py-3">
            <p>Unimplemented: Napkin Math goes here!</p>
            <h2>Hello World!</h2>
        </div>
    </div>

</div>

</div>


<script>

    async function getData(){
        var url = '<%= @url %>';
        const response = await fetch(url);
        const data = await response.json();

        var newData = parseData(data);
        return newData;
    };

    function parseData(data){
        console.log(data);
        race_title = data.ltedata.raceTitle;
        total_votes = data.ltedata.totalVotes;
        percent_reporting = data.ltedata.percentReporting;
        race_status = data.ltedd[0].winnerFullName;
        candidate_objects = [];
        for(let i = 0; i<data.ltedata.candidates.length; i++){
            var party = returnParty(data.ltedata.candidates[i].party)
        candidate_objects.push(new ResultCandidate(
            data.ltedata.candidates[i].firstName,
            data.ltedata.candidates[i].lastName,
            data.ltedata.candidates[i].fullName,
            data.ltedata.candidates[i].candidateImage,
            party[0],
            party[1],
            data.ltedata.candidates[i].votes
        ))
        }

        return [[race_title, total_votes, percent_reporting, race_status],candidate_objects, data.ltedata.countyResults]
    };
  
    function returnParty(party){
        switch(party){
            case "DEM":
                return ["Democrat","#0047ff"];
                break;
            case "GOP":
                return ["Republican","#cf0042"];
                break;
            case "NPP":
                return ["Independent","#c3c3c3"];
                break;
            case "LIB":
                return ["Libertarian","#efe210"];
                break;
            case "GRN":
                return ["Green","#11b900"];
                break;
            case "AIP":
                return ["Other","#000000"];
                break;
        }
        return ["NOT FOUND", "#AAAAAA"]

    }



    function calculateWinnerObject(candidates, winner){
        for(let i = 0; i<candidates.length; i++){
            if(candidates[i].fullName === winner){
                return candidates[i]
            }
        }
        //FUTURE FUNCTIONALITY FOR TOO EARLY TO CALL, TOO CLOSE TO CALL, AWAITING RESULTS
        return null
    }


    (function(){
    var refresh = function() {
        getData().then((data) => {
            var results = data;

            var candidates = results[1];
            var resultData = new ResultData(results[0][0], results[0][1], results[0][2], calculateWinnerObject(candidates, results[0][3]));
            var mapData = new ResultMapData(results[2]);
            var elem = $(".results-box");

            populateResults(elem, candidates, resultData, mapData);
        });
    };
    window.setInterval(refresh, 10000);
    refresh();
    })();

    

    

    $(document).ready(function(){

        

    });


</script>